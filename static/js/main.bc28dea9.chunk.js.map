{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","totalSupply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KycContract","listenToTokenTransfer","setState","updateUserTokens","getTotalSupply","alert","error","methods","balanceOf","call","events","Transfer","to","on","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleInputChange","event","target","type","checked","name","handleKycWhitelisting","setKycCompleted","this","className","display","textColor","subtitle","textAlign","rounded","size","src","marginless","breakpoint","Column","Field","align","kind","Control","fullwidth","Input","onChange","placeholder","color","onClick","path","mdiPlus","mdiCircleMultiple","href","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc28dea9.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from 'react';\r\nimport 'bulma/css/bulma.min.css';\r\nimport MyToken from './contracts/MyToken.json';\r\nimport MyTokenSale from './contracts/MyTokenSale.json';\r\nimport KycContract from './contracts/KycContract.json';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Columns,\r\n  Container,\r\n  Form,\r\n  Heading,\r\n  Block,\r\n  Image,\r\n} from 'react-bulma-components';\r\nimport getWeb3 from './getWeb3';\r\nimport Icon from '@mdi/react';\r\nimport { mdiCircleMultiple, mdiPlus } from '@mdi/js';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    loaded: false,\r\n    kycAddress: '',\r\n    tokenSaleAddress: null,\r\n    userTokens: 0,\r\n    totalSupply: 0,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      this.tokenInstance = new this.web3.eth.Contract(\r\n        MyToken.abi,\r\n        MyToken.networks[this.networkId] &&\r\n          MyToken.networks[this.networkId].address\r\n      );\r\n\r\n      this.tokenSaleInstance = new this.web3.eth.Contract(\r\n        MyTokenSale.abi,\r\n        MyTokenSale.networks[this.networkId] &&\r\n          MyTokenSale.networks[this.networkId].address\r\n      );\r\n      this.kycInstance = new this.web3.eth.Contract(\r\n        KycContract.abi,\r\n        KycContract.networks[this.networkId] &&\r\n          KycContract.networks[this.networkId].address\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToTokenTransfer();\r\n      this.setState(\r\n        {\r\n          loaded: true,\r\n          tokenSaleAddress: MyTokenSale.networks[this.networkId].address,\r\n        },\r\n        this.updateUserTokens\r\n      );\r\n      this.getTotalSupply();\r\n      //let totalSupply = await this.tokenInstance.methods.totalSupply();\r\n      //this.setState({ totalSupply: totalSupply });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  updateUserTokens = async () => {\r\n    let userTokens = await this.tokenInstance.methods\r\n      .balanceOf(this.accounts[0])\r\n      .call();\r\n    this.setState({ userTokens: userTokens });\r\n  };\r\n\r\n  listenToTokenTransfer = () => {\r\n    this.tokenInstance.events\r\n      .Transfer({ to: this.accounts[0] })\r\n      .on('data', this.updateUserTokens);\r\n  };\r\n\r\n  handleBuyTokens = async () => {\r\n    await this.tokenSaleInstance.methods.buyTokens(this.accounts[0]).send({\r\n      from: this.accounts[0],\r\n      value: this.web3.utils.toWei('1', 'wei'),\r\n    });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleKycWhitelisting = async () => {\r\n    await this.kycInstance.methods\r\n      .setKycCompleted(this.state.kycAddress)\r\n      .send({ from: this.accounts[0] });\r\n    alert('KYC for ' + this.state.kycAddress + ' is completed');\r\n  };\r\n\r\n  getTotalSupply = async () => {\r\n    let totalSupply = await this.tokenInstance.methods.totalSupply().call();\r\n    this.setState({ totalSupply: totalSupply });\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.loaded) {\r\n      return (\r\n        <Container textAlign='center'>\r\n          <div className='m-4'>\r\n            <Image\r\n              display='inline-block'\r\n              rounded\r\n              size={64}\r\n              src='img/metamask.svg'\r\n            />\r\n            <Heading>Connecting with Metamask...</Heading>\r\n            <p>Make sure to select Ropsten Test Network</p>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <Container>\r\n        <div className='App m-4 has-text-centered'>\r\n          <Box display='inline-block' className='main-box'>\r\n            <Heading\r\n              textColor='success'\r\n              subtitle\r\n              className='text-wide uppercase'\r\n            >\r\n              Total token supply: <b>{this.state.totalSupply}</b>\r\n            </Heading>\r\n            <Block textAlign='center'>\r\n              <Image\r\n                display='inline-block'\r\n                rounded\r\n                size={64}\r\n                src='img/onion.svg'\r\n              />\r\n            </Block>\r\n            <Heading marginless>GoldenOnion Mintable Token Sale</Heading>\r\n            <p className='is-size-4 mb-4'>Get your Onion today!</p>\r\n            <Columns breakpoint='tablet'>\r\n              <Columns.Column>\r\n                <div className='subheader-line'>\r\n                  <h2>KYC Whitelisting</h2>\r\n                </div>\r\n                <p className='mb-6'>\r\n                  In order to any account to mint <b>ONION</b>, it must be\r\n                  whitelisted beforehand.\r\n                </p>\r\n                <Form.Field align='center' kind='group'>\r\n                  <Form.Control fullwidth>\r\n                    <Form.Input\r\n                      name='kycAddress'\r\n                      value={this.state.kycAddress}\r\n                      onChange={this.handleInputChange}\r\n                      placeholder='Address to allow'\r\n                      type='text'\r\n                    ></Form.Input>\r\n                  </Form.Control>\r\n                  <Form.Control>\r\n                    <Button\r\n                      color='success'\r\n                      onClick={this.handleKycWhitelisting}\r\n                    >\r\n                      <Icon path={mdiPlus} size={1}></Icon>&nbsp;Add to\r\n                      Whitelist\r\n                    </Button>\r\n                  </Form.Control>\r\n                </Form.Field>\r\n              </Columns.Column>\r\n              <Columns.Column>\r\n                <div className='subheader-line'>\r\n                  <h2>Buy Tokens</h2>\r\n                </div>\r\n                <p className='is-size-4'>You currently have </p>\r\n                <span className='is-size-2 has-text-success has-text-weight-bold'>\r\n                  {this.state.userTokens}\r\n                </span>\r\n                <p className='is-size-4'>\r\n                  <b>ONION</b> Tokens\r\n                </p>\r\n                <p className='has-text-grey'>\r\n                  If you want to buy tokens, send Wei to this address:\r\n                  <br />\r\n                  <b>{this.state.tokenSaleAddress}</b>\r\n                </p>\r\n                <h4 className='is-size-4 my-4'>OR</h4>\r\n                <Button color='success' onClick={this.handleBuyTokens}>\r\n                  <Icon path={mdiCircleMultiple} size={1}></Icon>&nbsp; Buy more\r\n                  tokens\r\n                </Button>\r\n              </Columns.Column>\r\n            </Columns>\r\n          </Box>\r\n          <p>Educational dApp deployed in Test Network.</p>\r\n          <p>\r\n            Modified by{' '}\r\n            <a href='https://github.com/leandrososa' target='_blank'>\r\n              leandrososa\r\n            </a>\r\n            . Original assignment for the{' '}\r\n            <a\r\n              href='https://www.udemy.com/course/blockchain-developer/'\r\n              target='_blank'\r\n            >\r\n              Ethereum Solidity Developer Bootcamp\r\n            </a>\r\n            .\r\n          </p>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}